#!/usr/bin/env python3
"""
Cliente de pruebas para API REST de Usuarios.

Este m√≥dulo proporciona una interfaz de l√≠nea de comandos para interactuar
con la API REST de usuarios, permitiendo realizar operaciones CRUD completas.

Autor: Tu nombre
Fecha: 21 de octubre de 2025
"""

import json
import sys
from typing import Dict, Any, Optional
import requests
from requests.exceptions import ConnectionError, RequestException, Timeout


class APIClient:
    """Cliente para interactuar con la API REST de usuarios."""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        """
        Inicializa el cliente API.
        
        Args:
            base_url: URL base de la API
        """
        self.base_url = base_url.rstrip('/')
        self.timeout = 10
        
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Realiza una petici√≥n HTTP a la API.
        
        Args:
            method: M√©todo HTTP (GET, POST, PUT, PATCH, DELETE)
            endpoint: Endpoint de la API
            data: Datos a enviar en la petici√≥n
            
        Returns:
            Respuesta de la API como diccionario
            
        Raises:
            ConnectionError: Si no se puede conectar con la API
            RequestException: Si hay un error en la petici√≥n
        """
        url = f"{self.base_url}{endpoint}"
        
        try:
            response = requests.request(
                method=method,
                url=url,
                json=data,
                timeout=self.timeout,
                headers={'Content-Type': 'application/json'}
            )
            
            # Verificar si la respuesta es exitosa
            response.raise_for_status()
            
            return response.json()
            
        except ConnectionError:
            raise ConnectionError(f"‚ùå No se pudo conectar con la API en {self.base_url}")
        except Timeout:
            raise Timeout(f"‚è∞ Timeout al conectar con la API (>{self.timeout}s)")
        except RequestException as e:
            if hasattr(e.response, 'json'):
                try:
                    error_data = e.response.json()
                    raise RequestException(f"‚ùå Error API: {error_data.get('error', str(e))}")
                except:
                    pass
            raise RequestException(f"‚ùå Error en la petici√≥n: {e}")

    def get_all_users(self) -> Dict[str, Any]:
        """Obtiene todos los usuarios."""
        return self._make_request('GET', '/usuarios')

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        """Obtiene un usuario por su ID."""
        return self._make_request('GET', f'/usuarios/{user_id}')

    def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """Crea un nuevo usuario."""
        return self._make_request('POST', '/usuarios', user_data)

    def update_user_complete(self, user_id: int, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """Actualiza completamente un usuario."""
        return self._make_request('PUT', f'/usuarios/{user_id}', user_data)

    def update_user_partial(self, user_id: int, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """Actualiza parcialmente un usuario."""
        return self._make_request('PATCH', f'/usuarios/{user_id}', user_data)

    def delete_user(self, user_id: int) -> Dict[str, Any]:
        """Elimina un usuario."""
        return self._make_request('DELETE', f'/usuarios/{user_id}')


class MenuPeticiones:
    """Interfaz de men√∫ para realizar peticiones a la API."""
    
    def __init__(self):
        """Inicializa el men√∫ con el cliente API."""
        self.api_client = APIClient()
        self.opciones = {
            '1': ('Obtener todos los usuarios', self.obtener_todos_usuarios),
            '2': ('Obtener usuario por ID', self.obtener_usuario_por_id),
            '3': ('Crear nuevo usuario', self.crear_nuevo_usuario),
            '4': ('Actualizar usuario completo', self.actualizar_usuario_completo),
            '5': ('Actualizar usuario parcialmente', self.actualizar_usuario_parcialmente),
            '6': ('Eliminar usuario', self.eliminar_usuario),
            '7': ('Salir', self._salir)
        }

    def mostrar_menu(self) -> None:
        """Muestra el men√∫ de opciones."""
        print("\n" + "="*50)
        print("üåê CLIENTE API REST - GESTI√ìN DE USUARIOS")
        print("="*50)
        
        for opcion, (descripcion, _) in self.opciones.items():
            print(f"{opcion}. {descripcion}")
        
        print("="*50)

    def ejecutar_opcion(self, opcion: str) -> bool:
        """
        Ejecuta la opci√≥n seleccionada.
        
        Args:
            opcion: Opci√≥n seleccionada por el usuario
            
        Returns:
            False si el usuario quiere salir, True en caso contrario
        """
        if opcion in self.opciones:
            descripcion, funcion = self.opciones[opcion]
            print(f"\nüîÑ Ejecutando: {descripcion}")
            
            try:
                resultado = funcion()
                if opcion == '7':  # Opci√≥n salir
                    return False
                    
            except (ConnectionError, RequestException, Timeout) as e:
                print(f"‚ùå Error: {e}")
                
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, seleccione una opci√≥n del 1 al 7.")
            
        return True

    def _imprimir_respuesta(self, respuesta: Dict[str, Any]) -> None:
        """Imprime la respuesta de la API de forma legible."""
        print("\nüìã Respuesta de la API:")
        print("-" * 30)
        print(json.dumps(respuesta, indent=2, ensure_ascii=False))
        print("-" * 30)

    def _solicitar_entero(self, mensaje: str) -> int:
        """
        Solicita un n√∫mero entero al usuario con validaci√≥n.
        
        Args:
            mensaje: Mensaje a mostrar al usuario
            
        Returns:
            N√∫mero entero ingresado por el usuario
        """
        while True:
            try:
                valor = input(f"üìù {mensaje}: ").strip()
                return int(valor)
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def _solicitar_texto(self, mensaje: str, obligatorio: bool = True) -> str:
        """
        Solicita texto al usuario con validaci√≥n.
        
        Args:
            mensaje: Mensaje a mostrar al usuario
            obligatorio: Si el campo es obligatorio
            
        Returns:
            Texto ingresado por el usuario
        """
        while True:
            valor = input(f"üìù {mensaje}: ").strip()
            if valor or not obligatorio:
                return valor
            print("‚ùå Este campo es obligatorio.")

    def obtener_todos_usuarios(self) -> None:
        """Obtiene y muestra todos los usuarios."""
        respuesta = self.api_client.get_all_users()
        self._imprimir_respuesta(respuesta)

    def obtener_usuario_por_id(self) -> None:
        """Obtiene y muestra un usuario por su ID."""
        usuario_id = self._solicitar_entero("Ingrese el ID del usuario")
        respuesta = self.api_client.get_user_by_id(usuario_id)
        self._imprimir_respuesta(respuesta)

    def crear_nuevo_usuario(self) -> None:
        """Crea un nuevo usuario solicitando los datos necesarios."""
        print("\nüìù Creando nuevo usuario:")
        
        data = {
            'nombre': self._solicitar_texto("Ingrese el nombre del usuario"),
            'apellido': self._solicitar_texto("Ingrese el apellido del usuario"),
            'email': self._solicitar_texto("Ingrese el email del usuario"),
            'edad': self._solicitar_entero("Ingrese la edad del usuario")
        }
        
        # Campos opcionales
        telefono = self._solicitar_texto("Ingrese el tel√©fono (opcional)", obligatorio=False)
        if telefono:
            data['telefono'] = telefono
            
        ciudad = self._solicitar_texto("Ingrese la ciudad (opcional)", obligatorio=False)
        if ciudad:
            data['ciudad'] = ciudad
        
        respuesta = self.api_client.create_user(data)
        self._imprimir_respuesta(respuesta)

    def actualizar_usuario_completo(self) -> None:
        """Actualiza completamente un usuario."""
        usuario_id = self._solicitar_entero("Ingrese el ID del usuario a actualizar")
        
        print("\nüìù Actualizando usuario completo:")
        data = {
            'nombre': self._solicitar_texto("Ingrese el nuevo nombre"),
            'apellido': self._solicitar_texto("Ingrese el nuevo apellido"),
            'email': self._solicitar_texto("Ingrese el nuevo email"),
            'edad': self._solicitar_entero("Ingrese la nueva edad")
        }
        
        respuesta = self.api_client.update_user_complete(usuario_id, data)
        self._imprimir_respuesta(respuesta)

    def actualizar_usuario_parcialmente(self) -> None:
        """Actualiza parcialmente un usuario."""
        usuario_id = self._solicitar_entero("Ingrese el ID del usuario a actualizar")
        
        print("\nüìù Actualizaci√≥n parcial (deje en blanco los campos que no desea cambiar):")
        
        data = {}
        campos_disponibles = [
            ('nombre', 'nombre'),
            ('apellido', 'apellido'), 
            ('email', 'email'),
            ('edad', 'edad'),
            ('telefono', 'tel√©fono'),
            ('ciudad', 'ciudad'),
            ('profesion', 'profesi√≥n'),
            ('salario', 'salario')
        ]
        
        for campo, descripcion in campos_disponibles:
            if campo in ['edad', 'salario']:
                valor = input(f"üìù Nuevo {descripcion} (opcional): ").strip()
                if valor:
                    try:
                        data[campo] = int(valor) if campo == 'edad' else valor
                    except ValueError:
                        print(f"‚ùå Valor inv√°lido para {descripcion}, se omitir√°.")
            else:
                valor = self._solicitar_texto(f"Nuevo {descripcion} (opcional)", obligatorio=False)
                if valor:
                    data[campo] = valor
        
        if not data:
            print("‚ùå No se proporcionaron campos para actualizar.")
            return
            
        respuesta = self.api_client.update_user_partial(usuario_id, data)
        self._imprimir_respuesta(respuesta)

    def eliminar_usuario(self) -> None:
        """Elimina un usuario previa confirmaci√≥n."""
        usuario_id = self._solicitar_entero("Ingrese el ID del usuario a eliminar")
        
        confirmacion = input(f"‚ö†Ô∏è  ¬øEst√° seguro de eliminar el usuario {usuario_id}? (s/N): ").strip().lower()
        
        if confirmacion in ['s', 'si', 's√≠', 'y', 'yes']:
            respuesta = self.api_client.delete_user(usuario_id)
            self._imprimir_respuesta(respuesta)
        else:
            print("‚ùå Operaci√≥n cancelada.")

    def _salir(self) -> None:
        """Termina la aplicaci√≥n."""
        print("\nüëã ¬°Gracias por usar el cliente API REST!")
        print("üîÑ Cerrando aplicaci√≥n...")

    def run(self) -> None:
        """Ejecuta el bucle principal del men√∫."""
        print("üöÄ Iniciando cliente API REST...")
        
        # Verificar conexi√≥n con la API
        try:
            self.api_client._make_request('GET', '/')
            print("‚úÖ Conexi√≥n con la API establecida correctamente.")
        except (ConnectionError, RequestException, Timeout) as e:
            print(f"‚ùå No se pudo conectar con la API: {e}")
            print("üí° Aseg√∫rese de que el servidor Flask est√© ejecut√°ndose.")
            return
        
        # Bucle principal
        while True:
            self.mostrar_menu()
            opcion = input("\nüéØ Seleccione una opci√≥n: ").strip()
            
            if not self.ejecutar_opcion(opcion):
                break
            
            input("\n‚è∏Ô∏è  Presione Enter para continuar...")


def main() -> None:
    """Funci√≥n principal del programa."""
    try:
        menu = MenuPeticiones()
        menu.run()
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrumpido por el usuario. ¬°Hasta luego!")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()